# -*- coding: utf-8 -*-
"""cat_vs_dogs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QB0yNiEq_U1GdWiaTp3zcByN1XIEoxW-
"""

import warnings
warnings.filterwarnings('ignore')
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,Flatten,Conv2D,MaxPooling2D,Activation,Dropout
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.losses import categorical_crossentropy
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.utils import image_dataset_from_directory
from tensorflow.keras.datasets import fashion_mnist
import matplotlib.pyplot as plt
import numpy as np
from tensorflow.keras.models import Sequential

"""# dataset loading"""

(x_train, y_train), (x_test, y_test) = fashion_mnist.load_data()

print("Training data shape:", x_train.shape)
print("Training labels shape:", y_train.shape)
print("Test data shape:", x_test.shape)

"""# reshapping the image"""

def reshaping(x_train,x_test):
  x_train = x_train.reshape(x_train.shape[0],28,28,1)
  x_test = x_test.reshape(x_test.shape[0],28,28,1)
  return x_train,x_test

x_train,x_test = reshaping(x_train,x_test)

"""#checking the some images"""

for i in range(10):
  print("label",y_train[i])
  plt.imshow(x_train[i])
  plt.show()

"""# checking the image size"""

print(x_train.shape)
print(x_test.shape)

"""# checking unique values"""

val =np.unique(y_train)
print(val)

"""# Normalization"""

def normalize_data(x_train,x_test):
  x_train = x_train/255
  x_test = x_test/255
  return x_train,x_test

x_train,x_test = normalize_data(x_train,x_test)

"""# converting labels into one hot encoding"""

def convert_labels(y_train,y_test):
  y_train = to_categorical(y_train,10)
  y_test = to_categorical(y_test,10)
  return y_train,y_test

y_train,y_test = convert_labels(y_train,y_test)

y_train[0]

"""#model building"""

def model_building():
  model = Sequential()

  model.add(Conv2D(32,(3,3),activation='relu',input_shape=(28,28,1)))
  model.add(MaxPooling2D((2,2)))
  model.add(Conv2D(64,(3,3),activation='relu'))
  model.add(MaxPooling2D((2,2)))
  model.add(Conv2D(128,(3,3),activation='relu'))
  model.add(MaxPooling2D((2,2)))
  model.add(Flatten())
  model.add(Dense(128,activation='relu'))
  model.add(Dropout(0.2))
  model.add(Dense(10,activation='softmax'))
  return model

model = model_building()

model.summary()

model.compile(loss = 'categorical_crossentropy',optimizer = 'adam',metrics = ['accuracy'])

history = model.fit(x_train,y_train,epochs = 7,validation_data = (x_test,y_test),verbose=True)

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.show()

# Save the model
model.save('my_fashion_mnist_model.keras')

"""# model evaluation"""

def model_evaluation(model,x_test,y_test):
  loss,accuracy = model.evaluate(x_test,y_test)
  print(f'loss : {loss}')
  print(f'accuracy : {accuracy}')

"""# new data prediction"""

model_evaluation(model,x_test,y_test)

def model_prediction(model,test):
  y_pred = model.predict(test)
  y_pred = np.argmax(y_pred,axis=1)
  labels = {
      0: 'T-shirt/top',
      1: 'Trouser',
      2: 'Pullover',
      3: 'Dress',
      4: 'Coat',
      5: 'Sandal',
      6: 'Shirt',
      7: 'Sneaker',
      8: 'Bag',
      9: 'Ankle boot'
  }
  for prediction in y_pred:
    print(labels[prediction])

model_prediction(model,x_test[35].reshape(1,28,28,1))

